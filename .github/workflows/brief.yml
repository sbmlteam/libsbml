name: CMake

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.platform }}, Parser option ${{ matrix.xml_parser_option }}, with namespaces ${{ matrix.with_namespace}}, strict includes ${{ matrix.with_namespace }}, with examples ${{ matrix.with_examples}}, package option ${{ matrix.package_option}}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        xml_parser_option: ['-DWITH_LIBXML']
        with_namespace: ['True']
        strict: ['True']
        with_examples: ['True']
        package_option: ['-DWITH_ALL_PACKAGES=ON']
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v2

    ### configure the operating system ###
    - name: Cache Windows dependencies and SWIG
      # On Windows, the dependencies live inside the source folder, ie `.`.
      # For the CI, we put SWIG there too, for simplicity.
      if: matrix.platform == 'windows-latest'
      id: cache-win-dependencies
      uses: actions/cache@v2
      with:
        path: |
              ./dependencies
              ./swig
        key: ${{ runner.os }}-dependencies

    - name: Download pre-built Windows dependencies and SWIG
      # Windows dependencies have to be in a subfolder called `dependencies`, directly under the git repository root.
      # also gets SWIG, completing the set of dependencies needed for windows
      if: matrix.platform == 'windows-latest' && steps.cache-win-dependencies.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -L https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/libSBML_dependencies_vs15_release_x64.zip/download > dependencies.zip
        unzip dependencies.zip -d dependencies
        cp -r dependencies/libSBML\ Dependencies-1.0.0-b1-win64/* dependencies
        rm -r dependencies/libSBML*
        curl -L https://prdownloads.sourceforge.net/swig/swigwin-3.0.12.zip > swig.zip
        unzip swig.zip -d swig

    - name: add SWIG to Path (Windows)
      # this is separate from the SWIG download itself, because it needs to be added to the path also when SWIG is cached
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
           echo $GITHUB_WORKSPACE"/swig/swigwin-3.0.12/" >> $GITHUB_PATH

    - name: Use clang-9 on Windows
      # because ccache is not compatible with msvc compiler. We test the msvc compilation on PR when we allow the build to take more time.
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
           echo "CXX=clang-9" >> "${GITHUB_ENV}"

    - name: Install Ubuntu dependencies
      # ubuntu already has SWIG and libxml2 by default
      if: matrix.platform == 'ubuntu-16.04'
      shell: bash
      run: |
            sudo apt-get install -y check ccache

    - name: Install MacOS dependencies
      # MacOS already has libxml2 by default
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
            brew install check swig ccache

    ### setup ccache, not on Windows ###
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: Set ccache cache directory
      shell: bash
      run: |
        echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
        echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"
    - name: cache ccache files
      uses: actions/cache@v1.1.0
      with:
        path: ${{runner.workspace}}/.ccache
        key: ${{ runner.os }}-test-${{ matrix.xml_parser_option }}-${{ matrix.with_namespace }}-${{ matrix.strict }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ runner.os }}-test-${{ matrix.xml_parser_option }}-${{ matrix.with_namespace }}-${{ matrix.strict }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          ${{ runner.os }}-test-${{ matrix.xml_parser_option }}-${{ matrix.with_namespace }}-${{ matrix.strict }}-
          ${{ runner.os }}-test-${{ matrix.xml_parser_option }}-${{ matrix.with_namespace }}-
          ${{ runner.os }}-test-${{ matrix.xml_parser_option }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-

    ### build the project ###
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 15

    - name: Configure CMake for default XML_parser (LIBXML2)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
            echo $CXX
            cmake $GITHUB_WORKSPACE -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} ${{ matrix.package_option }} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CHECK=True -DWITH_JAVA=True -DWITH_CPP_NAMESPACE=${{matrix.with_namespace}} -DLIBSBML_USE_STRICT_INCLUDES=${{matrix.strict}} -DWITH_EXAMPLES=${{matrix.with_examples}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --parallel 4

    ### run tests ###
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
